import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import ttkbootstrap as ttk
import os
import threading
import subprocess
import tempfile
from typing import Optional, List, Dict, Tuple
import time
import nltk
import torch
from faster_whisper import WhisperModel
from deep_translator import GoogleTranslator
import google.generativeai as genai
import shutil
import errno
from gtts import gTTS
import psutil


class LinguoAIVideoVoicePro:
    def __init__(self):
        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
        self.ffmpeg_timeout = 30
        self.process_timeout = 7200
        self.chunk_timeout = 600
        self.validate_chunk_timeout = 20
        self.audio_extraction_chunk_size = 60
        self.transcribe_chunk_size = 60
        self.tts_batch_size = 10
        self.model_size = "medium"
        self.target_language = "en"
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.gemini_api_key = ""
        self.tts_engine = "gtts"
        self.hw_accel_info = self.detect_hardware_acceleration()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.hw_accel = self.hw_accel_info['accel'] if self.hw_accel_info else None

        # --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
        self.whisper_model: Optional[WhisperModel] = None
        self.current_process: Optional[subprocess.Popen] = None
        self.process_start_time: Optional[float] = None
        self.process_temp_dir: str = ""

        # --- GUI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
        self.root = ttk.Window(themename="darkly")
        self.root.title("LinguoAI VideoVoice Pro")
        self.root.geometry("640x850")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        self.source_file = tk.StringVar()
        self.target_file = tk.StringVar()
        self.selected_language = tk.StringVar(value="en")
        self.gemini_key = tk.StringVar()  # –ö–ª—é—á API Gemini
        self.progress_var = tk.DoubleVar(value=0)
        self.log_messages: List[str] = []

        self.languages = {
            "af": ("–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å", "üáøüá¶"),
            "sq": ("–ê–ª–±–∞–Ω—Å–∫–∏–π", "üá¶üá±"),
            "am": ("–ê–º—Ö–∞—Ä—Å–∫–∏–π", "üá™üáπ"),
            "ar": ("–ê—Ä–∞–±—Å–∫–∏–π", "üá∏üá¶"),
            "eu": ("–ë–∞—Å–∫—Å–∫–∏–π", "üá™üá∏"),
            "bn": ("–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π", "üáßüá©"),
            "bs": ("–ë–æ—Å–Ω–∏–π—Å–∫–∏–π", "üáßüá¶"),
            "bg": ("–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π", "üáßüá¨"),
            "ca": ("–ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π", "üá¶üá©"),
            "zh-CN": ("–ö–∏—Ç–∞–π—Å–∫–∏–π (–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π)", "üá®üá≥"),
            "zh-TW": ("–ö–∏—Ç–∞–π—Å–∫–∏–π (–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π)", "üáπüáº"),
            "hr": ("–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π", "üá≠üá∑"),
            "cs": ("–ß–µ—à—Å–∫–∏–π", "üá®üáø"),
            "da": ("–î–∞—Ç—Å–∫–∏–π", "üá©üá∞"),
            "nl": ("–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π", "üá≥üá±"),
            "en": ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üá¨üáß"),
            "et": ("–≠—Å—Ç–æ–Ω—Å–∫–∏–π", "üá™üá™"),
            "tl": ("–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π", "üáµüá≠"),
            "fi": ("–§–∏–Ω—Å–∫–∏–π", "üá´üáÆ"),
            "fr": ("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "üá´üá∑"),
            "gl": ("–ì–∞–ª–∏—Å–∏–π—Å–∫–∏–π", "üá™üá∏"),
            "de": ("–ù–µ–º–µ—Ü–∫–∏–π", "üá©üá™"),
            "el": ("–ì—Ä–µ—á–µ—Å–∫–∏–π", "üá¨üá∑"),
            "gu": ("–ì—É–¥–∂–∞—Ä–∞—Ç–∏", "üáÆüá≥"),
            "ha": ("–•–∞—É—Å–∞", "üá≥üá¨"),
            "he": ("–ò–≤—Ä–∏—Ç", "üáÆüá±"),
            "hi": ("–•–∏–Ω–¥–∏", "üáÆüá≥"),
            "hu": ("–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π", "üá≠üá∫"),
            "is": ("–ò—Å–ª–∞–Ω–¥—Å–∫–∏–π", "üáÆüá∏"),
            "id": ("–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π", "üáÆüá©"),
            "it": ("–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "üáÆüáπ"),
            "ja": ("–Ø–ø–æ–Ω—Å–∫–∏–π", "üáØüáµ"),
            "jw": ("–Ø–≤–∞–Ω—Å–∫–∏–π", "üáÆüá©"),
            "kn": ("–ö–∞–Ω–Ω–∞–¥–∞", "üáÆüá≥"),
            "km": ("–ö—Ö–º–µ—Ä—Å–∫–∏–π", "üá∞üá≠"),
            "ko": ("–ö–æ—Ä–µ–π—Å–∫–∏–π", "üá∞üá∑"),
            "la": ("–õ–∞—Ç–∏–Ω—Å–∫–∏–π", "üáªüá¶"),
            "lv": ("–õ–∞—Ç—ã—à—Å–∫–∏–π", "üá±üáª"),
            "lt": ("–õ–∏—Ç–æ–≤—Å–∫–∏–π", "üá±üáπ"),
            "ms": ("–ú–∞–ª–∞–π—Å–∫–∏–π", "üá≤üáæ"),
            "mr": ("–ú–∞—Ä–∞—Ç—Ö–∏", "üáÆüá≥"),
            "ml": ("–ú–∞–ª–∞—è–ª–∞–º", "üáÆüá≥"),
            "my": ("–ú—å—è–Ω–º–∞–Ω—Å–∫–∏–π (–ë–∏—Ä–º–∞–Ω—Å–∫–∏–π)", "üá≤üá≤"),
            "ne": ("–ù–µ–ø–∞–ª—å—Å–∫–∏–π", "üá≥üáµ"),
            "no": ("–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π", "üá≥üá¥"),
            "pa": ("–ü–∞–Ω–¥–∂–∞–±–∏", "üáÆüá≥"),
            "pl": ("–ü–æ–ª—å—Å–∫–∏–π", "üáµüá±"),
            "pt": ("–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", "üáµüáπ"),
            "ro": ("–†—É–º—ã–Ω—Å–∫–∏–π", "üá∑üá¥"),
            "ru": ("–†—É—Å—Å–∫–∏–π", "üá∑üá∫"),
            "sr": ("–°–µ—Ä–±—Å–∫–∏–π", "üá∑üá∏"),
            "si": ("–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π", "üá±üá∞"),
            "sk": ("–°–ª–æ–≤–∞—Ü–∫–∏–π", "üá∏üá∞"),
            "sl": ("–°–ª–æ–≤–µ–Ω—Å–∫–∏–π", "üá∏üáÆ"),
            "es": ("–ò—Å–ø–∞–Ω—Å–∫–∏–π", "üá™üá∏"),
            "su": ("–°—É–Ω–¥–∞–Ω—Å–∫–∏–π", "üáÆüá©"),
            "sw": ("–°—É–∞—Ö–∏–ª–∏", "üá∞üá™"),
            "sv": ("–®–≤–µ–¥—Å–∫–∏–π", "üá∏üá™"),
            "ta": ("–¢–∞–º–∏–ª—å—Å–∫–∏–π", "üáÆüá≥"),
            "te": ("–¢–µ–ª—É–≥—É", "üáÆüá≥"),
            "th": ("–¢–∞–π—Å–∫–∏–π", "üáπüá≠"),
            "tr": ("–¢—É—Ä–µ—Ü–∫–∏–π", "üáπüá∑"),
            "uk": ("–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π", "üá∫üá¶"),
            "ur": ("–£—Ä–¥—É", "üáµüá∞"),
            "vi": ("–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π", "üáªüá≥"),
            "cy": ("–í–∞–ª–ª–∏–π—Å–∫–∏–π", "üá¨üáß")
        }

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        self.setup_gui()
        self.setup_ffmpeg()
        self.load_api_keys_from_environment()
        self.load_whisper_model()
        if self.gemini_api_key:
            self.init_gemini()
        self.log_hardware_acceleration()

    def seconds_to_srt_time(self, seconds: float) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ SRT (HH:MM:SS,mmm)."""
        milliseconds = int((seconds * 1000) % 1000)
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        return f"{int(hours):02}:{int(minutes):02}:{int(seconds):02},{milliseconds:03}"

    def create_srt_file(self, segments: List[Dict], output_path: str):
        """–°–æ–∑–¥–∞–µ—Ç SRT-—Ñ–∞–π–ª –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö/–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤."""
        try:
            with open(output_path, "w", encoding="utf-8") as f:
                for i, segment in enumerate(segments):
                    start_time = segment['start']
                    end_time = segment['end']
                    text = segment['text']

                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç SRT
                    start_time_srt = self.seconds_to_srt_time(start_time)
                    end_time_srt = self.seconds_to_srt_time(end_time)

                    f.write(f"{i + 1}\n")
                    f.write(f"{start_time_srt} --> {end_time_srt}\n")
                    f.write(f"{text}\n\n")

            self.log_message(f"SRT-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SRT-—Ñ–∞–π–ª–∞: {e}")

    def log_hardware_acceleration(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º —É—Å–∫–æ—Ä–µ–Ω–∏–∏."""
        if self.hw_accel_info:
            self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {self.hw_accel_info['accel']} ({self.hw_accel_info['info']})")
        else:
            self.log_message("–ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    def detect_hardware_acceleration(self):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (NVIDIA, Intel, AMD)."""
        try:
            # NVIDIA
            try:
                subprocess.run(['nvidia-smi'], check=True, capture_output=True)
                return {'accel': 'cuda', 'info': '–û–±–Ω–∞—Ä—É–∂–µ–Ω GPU NVIDIA'}
            except (FileNotFoundError, subprocess.CalledProcessError):
                pass

            # Intel (Quick Sync)
            try:
                output = subprocess.run(['vainfo'], check=True, capture_output=True, text=True).stdout
                if "VA-API" in output:  # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                    return {'accel': 'qsv', 'info': '–û–±–Ω–∞—Ä—É–∂–µ–Ω Intel Quick Sync'}
            except (FileNotFoundError, subprocess.CalledProcessError):
                pass

            # AMD (AMF) - –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ "amfinfo"
            # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–∏—Å–∫–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–æ —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –û–°.
            # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–∞—è, –Ω–µ–ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Linux:
            if os.name == 'posix':  # Linux/macOS
                try:
                    output = subprocess.run(['lspci', '-v'], check=True, capture_output=True, text=True).stdout
                    if "Advanced Micro Devices, Inc. [AMD/ATI]" in output:
                        return {'accel': 'h264_vaapi', 'info': '–û–±–Ω–∞—Ä—É–∂–µ–Ω GPU AMD (VAAPI)'}  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ!
                except (FileNotFoundError, subprocess.CalledProcessError):
                    pass

            return None  # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è: {e}")
            return None
    def init_gemini(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å Gemini Pro."""
        try:
            genai.configure(api_key=self.gemini_api_key)
            self.model = genai.GenerativeModel('gemini-pro')
            self.log_message("–ú–æ–¥–µ–ª—å Gemini Pro –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini Pro: {e}")
            messagebox.showerror("Gemini Error", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini Pro: {e}")
            self.model = None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ

    def check_process_timeout(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ."""
        if self.process_start_time and time.time() - self.process_start_time > self.process_timeout:
            if self.current_process:
                self.log_message(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞! –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (PID: {self.current_process.pid})...")
                self.kill_process_tree(self.current_process.pid)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!
            raise TimeoutError("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ")

    def kill_process_tree(self, pid):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤—Å–µ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        try:
            parent = psutil.Process(pid)
            for child in parent.children(recursive=True):  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π/–≤–Ω—É–∫–æ–≤
                self.log_message(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {child.pid}")
                child.kill()
            self.log_message(f"–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {parent.pid}")
            parent.kill()
        except psutil.NoSuchProcess:
            self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

    def run_subprocess_with_timeout(self, command, timeout, error_message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç–∞–π–º-–∞—É—Ç–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        try:
            self.log_message(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º-–∞—É—Ç–æ–º {timeout}: {' '.join(command)}")
            self.current_process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: {self.current_process.pid}")

            start_time = time.time()
            last_output_time = start_time

            stdout, stderr = self.current_process.communicate(timeout=timeout)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º communicate!
            retcode = self.current_process.returncode

            if retcode != 0:
                self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ {retcode}:")
                self.log_message(f"Stdout: {stdout}")
                self.log_message(f"Stderr: {stderr}")
                raise subprocess.CalledProcessError(retcode, command, stdout, stderr)

            self.log_message("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            return stdout, stderr

        except subprocess.TimeoutExpired:
            self.log_message(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ {timeout} —Å–µ–∫—É–Ω–¥")
            self.kill_process_tree(self.current_process.pid)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!
            stdout, stderr = self.current_process.communicate()  # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –≤—ã–≤–æ–¥
            self.log_message(f"Stdout: {stdout}")
            self.log_message(f"Stderr: {stderr}")
            raise TimeoutError(error_message)

        except Exception as e:
            self.log_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.current_process:
                self.kill_process_tree(self.current_process.pid)  # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            raise
        finally:
            self.current_process = None

    def extract_audio_chunk(self, video_path, audio_path, start_time, duration):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ."""
        command = [
            "ffmpeg",
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
            "-ss", str(start_time),
            "-i", video_path,
            "-t", str(duration),
            "-vn",  # –û—Ç–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ
            "-acodec", "libmp3lame",
            "-q:a", "2",  # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3
            "-loglevel", "error",  # –£–º–µ–Ω—å—à–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            audio_path
        ]
        if self.hw_accel:
            command.insert(1, "-hwaccel")
            command.insert(2, self.hw_accel)

        try:
            self.run_subprocess_with_timeout(command, self.chunk_timeout, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
            self.log_message(f"–ê—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω: '{audio_path}'")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")
            raise

    def batch_segments(self, segments: List[Dict]) -> List[List[Dict]]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è TTS."""
        batched_segments = []
        for i in range(0, len(segments), self.tts_batch_size):
            batch = segments[i:i + self.tts_batch_size]
            batched_segments.append(batch)
        return batched_segments

    def validate_audio_chunk(self, chunk_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffprobe."""
        command = [
            "ffprobe",
            "-v", "error",
            "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1",
            chunk_path
        ]
        try:
            stdout, stderr = self.run_subprocess_with_timeout(
                command,
                self.validate_chunk_timeout,
                f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {chunk_path}"
            )
            if stdout.strip():
                self.log_message(f"–ê—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω: {chunk_path}")
                return True
            else:
                self.log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): {chunk_path}")
                return False
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {chunk_path}: {e}")
            return False

    def merge_audio_chunks(self, audio_chunks, output_path):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg."""
        if not audio_chunks:
            self.log_message("–ù–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return

        valid_chunks = [chunk for chunk in audio_chunks if self.validate_audio_chunk(chunk)]
        if not valid_chunks:
            self.log_message("–ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return

        timestamp = int(time.time())
        temp_dir = os.path.join(tempfile.gettempdir(), f"audio_merge_temp_{timestamp}")
        os.makedirs(temp_dir, exist_ok=True)

        list_file_path = os.path.join(temp_dir, "chunk_list.txt")
        try:
            with open(list_file_path, "w") as f:
                for chunk_path in valid_chunks:
                    abs_chunk_path = os.path.abspath(chunk_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                    f.write(f"file '{abs_chunk_path}'\n")

            command = [
                "ffmpeg",
                "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                "-f", "concat",
                "-safe", "0",  # –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π —Å concat
                "-i", list_file_path,
                "-c", "copy",
                "-loglevel", "error",
                output_path
            ]
            if self.hw_accel:
                command.insert(1, "-hwaccel")
                command.insert(2, self.hw_accel)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º-–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.
            merge_timeout = len(valid_chunks) * 10 + 30  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç + 30 –±–∞–∑–æ–≤—ã—Ö
            self.run_subprocess_with_timeout(command, merge_timeout, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ")
            self.log_message(f"–ê—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: '{output_path}'")

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {e}")
            raise
        finally:
            self.remove_file_with_retry(list_file_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–∞
            self.remove_directory_with_retry(temp_dir)  # –∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞

    def merge_video_audio(self, audio_file):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –≤–∏–¥–µ–æ."""
        try:
            output_path = self.target_file.get()
            video_path = self.source_file.get()

            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffprobe
            duration_command = [
                "ffprobe",
                "-v", "error",
                "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1",
                video_path
            ]
            duration_output, _ = self.run_subprocess_with_timeout(duration_command, 30, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ")
            total_duration = float(duration_output.strip())
            self.log_message(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º-–∞—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3x –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + 120 —Å–µ–∫—É–Ω–¥)
            dynamic_timeout = int(3 * total_duration + 120)
            self.log_message(f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {dynamic_timeout} —Å–µ–∫—É–Ω–¥")

            command = [
                'ffmpeg',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                '-i', video_path,
                '-i', audio_file,
                '-c:v', 'h264_nvenc' if self.hw_accel == 'cuda' else 'libx264',  # H.265
                '-c:a', 'aac',
                '-map', '0:v:0',
                '-map', '1:a:0',
                '-shortest',  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Ç–æ–∫
                output_path
            ]
            if self.hw_accel:
                command.insert(1, "-hwaccel")
                command.insert(2, self.hw_accel)

            self.run_subprocess_with_timeout(command, dynamic_timeout, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ")
            self.log_message(f"–í–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: {output_path}")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ: {e}")
            raise

    def shorten_text_with_gemini(self, text: str) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini Pro, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏."""
        if self.model is None:
            self.log_message("–ú–æ–¥–µ–ª—å Gemini Pro –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ.")
            return text

        try:
            prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n{text}"
            time.sleep(1.5)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: –ø–∞—É–∑–∞ –Ω–∞ 1,5 —Å–µ–∫—É–Ω–¥—ã
            response = self.model.generate_content(prompt)
            if response and response.text:
                shortened_text = response.text
                self.log_message("–¢–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω —Å –ø–æ–º–æ—â—å—é Gemini Pro.")
                return shortened_text
            else:
                self.log_message("Gemini Pro –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.")
                return text
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini: {e}")
            return text

    def process_video(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
        self.process_start_time = time.time()
        timestamp = int(time.time())
        self.process_temp_dir = os.path.join(tempfile.gettempdir(), f"process_temp_{timestamp}")
        os.makedirs(self.process_temp_dir, exist_ok=True)

        try:
            self.log_message("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
            self.progress_var.set(5)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–π–º-–∞—É—Ç–∞ *–ø–µ—Ä–µ–¥* –Ω–∞—á–∞–ª–æ–º –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–∞–¥–∞—á.
            def check_timeout():
                self.check_process_timeout()
                self.root.after(1000, check_timeout)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            check_timeout()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–π–º-–∞—É—Ç–∞

            self.progress_var.set(10)
            audio_chunks, total_duration = self.extract_audio_in_chunks(self.source_file.get())
            self.progress_var.set(25)

            segments, total_words_original = self.transcribe_audio_in_chunks(audio_chunks, self.target_language)
            if not segments:
                raise Exception("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            self.progress_var.set(45)

            translated_segments, total_words_translated = self.translate_and_refine_segments(segments)

            # --- –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ Gemini (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ---
            total_words_shortened = 0
            if self.gemini_api_key and self.model:
                shortened_segments = []
                for segment in translated_segments:
                    shortened_text = self.shorten_text_with_gemini(segment['text'])
                    shortened_segments.append({
                        'start': segment['start'],
                        'end': segment['end'],
                        'text': shortened_text
                    })
                    total_words_shortened += len(shortened_text.split())
                    self.root.update()  # –û–±–Ω–æ–≤–ª—è–µ–º GUI
                translated_segments = shortened_segments

                shortening_change = (
                    ((total_words_translated - total_words_shortened) / total_words_translated) * 100
                    if total_words_translated else 0
                )
                self.log_message(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∏–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞: {shortening_change:.2f}%")
            else:
                total_words_shortened = total_words_translated
                self.log_message("–ö–ª—é—á API Gemini –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ.")

            self.progress_var.set(60)

            # –°–æ–∑–¥–∞–Ω–∏–µ SRT-—Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä)
            srt_output_path = os.path.splitext(self.target_file.get())[0] + ".srt"  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            self.create_srt_file(translated_segments, srt_output_path)

            # --- –û—Ç—á–µ—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–ª–æ–≤ ---
            if total_words_original > 0:
                translation_change = (total_words_translated / total_words_original) * 100
                self.log_message(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {total_words_original}")
                self.log_message(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {total_words_translated}")
                self.log_message(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {translation_change:.2f}%")
            else:
                self.log_message("–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ —Ä–∞–≤–Ω–æ –Ω—É–ª—é. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç.")

            # --- TTS –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ ---
            batched_translated_segments = self.batch_segments(translated_segments)
            all_updated_segments = []
            merged_audio_files = []

            for i, batch in enumerate(batched_translated_segments):
                self.log_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ TTS {i+1}/{len(batched_translated_segments)}")
                merged_audio_path, updated_segments = self.generate_tts_audio_for_segments(batch)
                if merged_audio_path:
                    all_updated_segments.extend(updated_segments)
                    merged_audio_files.append(merged_audio_path)
                else:
                    self.log_message(f"–ü–∞–∫–µ—Ç TTS {i+1} –Ω–µ —É–¥–∞–ª—Å—è.")
                    # –û—á–∏—â–∞–µ–º *–≤—Å–µ* —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã TTS –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è
                    for file_path in merged_audio_files:
                        self.remove_file_with_retry(file_path)
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ TTS –¥–ª—è –ø–∞–∫–µ—Ç–∞ {i + 1}.")

            # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤) ---
            if len(merged_audio_files) > 1:
                final_merged_audio_path = os.path.join(self.process_temp_dir,
                                                        f"final_merged_tts_audio_{timestamp}.mp3")
                self.merge_audio_chunks(merged_audio_files, final_merged_audio_path)
                self.log_message(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ TTS: {final_merged_audio_path}")
            elif merged_audio_files:
                final_merged_audio_path = merged_audio_files[0]
                self.log_message(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ TTS (–æ–¥–∏–Ω –ø–∞–∫–µ—Ç): {final_merged_audio_path}")
            else:
                raise Exception("–ê—É–¥–∏–æ TTS –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

            # --- –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã TTS ---
            for file_path in merged_audio_files:
                if file_path != final_merged_audio_path:  # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª!
                    self.remove_file_with_retry(file_path)

            self.progress_var.set(80)

            # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ ---
            self.merge_video_audio(final_merged_audio_path)
            self.progress_var.set(95)

            self.log_message("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")
            messagebox.showinfo("Success", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


        except TimeoutError as e:
            self.log_message(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            messagebox.showerror("Error", f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞: {str(e)}")
            messagebox.showerror("Error", f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
        finally:
            # --- –û—á–∏—Å—Ç–∫–∞ ---
            self.progress_var.set(0)
            self.process_start_time = None
            self.current_process = None
            self.start_button.config(state=tk.NORMAL)  # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.remove_directory_with_retry(self.process_temp_dir)

    def remove_file_with_retry(self, file_path, retries=3, delay=0.5):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, –ø–æ–≤—Ç–æ—Ä—è—è –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        file_path = os.path.abspath(file_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        for i in range(retries):
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                self.log_message(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
                return  # –£—Å–ø–µ—Ö
            except OSError as e:
                if e.errno == errno.ENOENT:  # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —É–∂–µ —É–¥–∞–ª–µ–Ω
                    self.log_message(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–∂–µ —É–¥–∞–ª–µ–Ω): {file_path}")
                    return
                if i < retries - 1:  # –ù–µ –∂–¥–µ–º –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
                    self.log_message(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ({i+1}/{retries}): {file_path}")
                    time.sleep(delay)
                else:
                    self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫: {file_path} - {e}")
            except Exception as e:
                self.log_message(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {file_path} - {e}")
                return  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫

    def remove_directory_with_retry(self, dir_path, retries=5, delay=1):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥, –ø–æ–≤—Ç–æ—Ä—è—è –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –Ω–µ–ø—É—Å—Ç—ã—Ö)."""
        dir_path = os.path.abspath(dir_path)
        for i in range(retries):
            try:
                if os.path.exists(dir_path):
                    shutil.rmtree(dir_path)
                self.log_message(f"–ö–∞—Ç–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω: {dir_path}")
                return
            except OSError as e:
                if e.errno == errno.ENOENT:  # –ö–∞—Ç–∞–ª–æ–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω
                    self.log_message(f"–ö–∞—Ç–∞–ª–æ–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω: {dir_path}")
                    return
                elif e.errno == errno.ENOTEMPTY:  # –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç
                    self.log_message(f"–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ({i+1}/{retries}): {dir_path}")
                    time.sleep(delay)
                else:
                    self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {dir_path} - {e}")
                    time.sleep(delay)  # –ñ–¥–µ–º –¥–∞–∂–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            except Exception as e:
                self.log_message(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {dir_path} - {e}")
                return

    def setup_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg."""
        try:
            self.run_subprocess_with_timeout(['ffmpeg', '-version'], 10, "–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg –Ω–µ —É–¥–∞–ª–∞—Å—å")
            self.ffmpeg_available = True
            self.log_message("FFmpeg –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
        except FileNotFoundError:
            self.ffmpeg_available = False
            self.log_message("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg.")
            messagebox.showwarning("FFmpeg Missing", "–¢—Ä–µ–±—É–µ—Ç—Å—è FFmpeg. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
        except Exception as e:
            self.ffmpeg_available = False
            self.log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            messagebox.showwarning("FFmpeg Error", "–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")

    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        title_label = ttk.Label(header_frame, text="üé¨ LinguoAI VideoVoice Pro", font=('Helvetica', 16, 'bold'))
        title_label.pack()

        # --- –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ ---
        file_frame = ttk.LabelFrame(main_frame, text="–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã", padding="10")
        file_frame.pack(fill=tk.X, pady=5)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–∫—É –¥–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
        source_frame = ttk.Frame(file_frame)
        source_frame.pack(fill=tk.X, pady=2)
        ttk.Label(source_frame, text="üìπ –í—Ö–æ–¥:", width=10).grid(row=0, column=0, padx=5, sticky=tk.W)
        self.source_entry = ttk.Entry(source_frame, textvariable=self.source_file, width=40)
        self.source_entry.grid(row=0, column=1, padx=5, sticky=tk.EW)
        ttk.Button(source_frame, text="–û–±–∑–æ—Ä", command=self.browse_source, style="Accent.TButton").grid(row=0, column=2, padx=5)

        target_frame = ttk.Frame(file_frame)
        target_frame.pack(fill=tk.X, pady=2)
        ttk.Label(target_frame, text="üíæ –í—ã—Ö–æ–¥:", width=10).grid(row=0, column=0, padx=5, sticky=tk.W)
        self.target_entry = ttk.Entry(target_frame, textvariable=self.target_file, width=40)
        self.target_entry.grid(row=0, column=1, padx=5, sticky=tk.EW)
        ttk.Button(target_frame, text="–û–±–∑–æ—Ä", command=self.browse_target, style="Accent.TButton").grid(row=0, column=2, padx=5)

        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        source_frame.columnconfigure(1, weight=1)
        target_frame.columnconfigure(1, weight=1)


        # --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
        lang_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞", padding="10")
        lang_frame.pack(fill=tk.X, pady=5)

        lang_combo_frame = ttk.Frame(lang_frame)
        lang_combo_frame.pack(fill=tk.X, pady=2)
        ttk.Label(lang_combo_frame, text="üó£Ô∏è –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫:").pack(side=tk.LEFT, padx=5)

        # –ö–æ–º–±–æ–±–æ–∫—Å —Å –ø–æ–∏—Å–∫–æ–º
        self.language_search_var = tk.StringVar()
        self.language_search_var.trace("w", self.update_language_list)
        self.language_search_entry = ttk.Entry(lang_combo_frame, textvariable=self.language_search_var)
        self.language_search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.lang_combo = ttk.Combobox(
            lang_combo_frame,
            values=[f"{flag} {name}" for code, (name, flag) in self.languages.items()],
            state="readonly"
        )
        self.lang_combo.pack(side=tk.LEFT, fill=tk.X, expand=False, padx=5)
        self.lang_combo.set("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.language_search_entry.bind("<Return>", (lambda event: self.lang_combo.focus()))
        self.lang_combo.bind("<<ComboboxSelected>>", self.on_language_selected)

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è ---
        options_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", padding="10")
        options_frame.pack(fill=tk.X, pady=5)

        # –ö–ª—é—á API Gemini
        brain_frame = ttk.Frame(options_frame)
        brain_frame.pack(fill=tk.X, pady=2)

        # --- –û–ø–∏—Å–∞–Ω–∏–µ API Key Gemini ---
        gemini_description_label = ttk.Label(
            brain_frame,
            wraplength=600,  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç
            justify=tk.LEFT,  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            text="–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google Gemini Pro API –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.  "
                 "–≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —É–º–µ–Ω—å—à–∏—Ç—å –æ–±—â—É—é –¥–ª–∏–Ω—É –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                 "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á API.  –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, "
                 "–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è."
        )
        gemini_description_label.pack(side=tk.TOP, fill=tk.X, pady=(0, 5))

        gemini_link_label = ttk.Label(
            brain_frame,
            text="–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á API Gemini –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: ",
            foreground="dodgerblue",  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
            cursor="hand2"  # –ú–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        )
        gemini_link_label.pack(side=tk.TOP, fill=tk.X)
        gemini_link_label.bind("<Button-1>", lambda e: self.open_webpage("https://makersuite.google.com/app/apikey"))

        self.gemini_key_label = ttk.Label(brain_frame, text="–ö–ª—é—á API Gemini:")
        self.gemini_key_label.pack(side=tk.LEFT, padx=5)
        self.gemini_key_entry = ttk.Entry(brain_frame, textvariable=self.gemini_key, width=30, show="*")
        self.gemini_key_entry.pack(side=tk.LEFT)

        self.start_button = ttk.Button(options_frame, text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", command=self.start_processing,
                                       style="Success.TButton")
        self.start_button.pack(pady=10)

        # --- –ü—Ä–æ–≥—Ä–µ—Å—Å ---
        progress_frame = ttk.LabelFrame(main_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å", padding="10")
        progress_frame.pack(fill=tk.X, pady=5)
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100,
                                            style="Success.Horizontal.TProgressbar")
        self.progress_bar.pack(fill=tk.X, pady=5)
        self.status_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤")
        self.status_label.pack()

        # --- –õ–æ–≥ ---
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏", padding="10")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        self.log_text = scrolledtext.ScrolledText(log_frame, height=6, state='disabled', wrap=tk.WORD)  # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –ø–æ —Å–ª–æ–≤–∞–º
        self.log_text.pack(fill=tk.BOTH, expand=True)

    def on_language_selected(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑ –∫–æ–º–±–æ–±–æ–∫—Å–∞."""
        selected_lang_str = self.lang_combo.get()
        for code, (name, flag) in self.languages.items():
            if f"{flag} {name}" == selected_lang_str:
                self.target_language = code  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
                self.log_message(f"–í—ã–±—Ä–∞–Ω —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫: {name} ({code})")
                break

    def update_language_list(self, *args):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        search_term = self.language_search_var.get().lower()
        filtered_languages = [
            f"{flag} {name}"
            for code, (name, flag) in self.languages.items()
            if search_term in name.lower() or search_term in code.lower() or search_term in flag.lower()
        ]
        self.lang_combo['values'] = filtered_languages
        if filtered_languages:
            self.lang_combo.set(filtered_languages[0])  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        else:
            self.lang_combo.set('')  # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    def browse_source(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ."""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
            filetypes=[("–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã", "*.mp4 *.avi *.mkv *.mov"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filename:
            self.source_file.set(filename)
            base = os.path.splitext(filename)[0]
            self.target_file.set(f"{base}_translated.mp4")
            self.source_entry.xview_moveto(1) #–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞
            self.target_entry.xview_moveto(1)

    def browse_target(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ."""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ",
            defaultextension=".mp4",
            filetypes=[("–§–∞–π–ª—ã MP4", "*.mp4")]
        )
        if filename:
            self.target_file.set(filename)
            self.source_entry.xview_moveto(1)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞
            self.target_entry.xview_moveto(1)
    def log_message(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GUI –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤."""
        self.log_messages.append(message)
        self.log_text.config(state='normal')  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state='disabled')  # –°–Ω–æ–≤–∞ –æ—Ç–∫–ª—é—á–∞–µ–º
        self.status_label.config(text=message)
        self.root.update_idletasks()

    def load_api_keys_from_environment(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.gemini_api_key = os.environ.get("GEMINI_API_KEY", "")
        self.gemini_key.set(self.gemini_api_key)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ GUI

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if not self.ffmpeg_available:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è FFmpeg!")
            return
        if not self.source_file.get() or not self.target_file.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª—ã.")
            return

        try:
            lang_str = self.lang_combo.get()
            self.target_language = next(
                (code for code, (name, flag) in self.languages.items() if f"{flag} {name}" == lang_str), None
            )
            if self.target_language is None:
                raise ValueError("–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫.")
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
            return

        self.gemini_api_key = self.gemini_key.get()
        if self.gemini_api_key:
            self.init_gemini()
        else:
            self.log_message("–ö–ª—é—á API Gemini –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ.")

        self.start_button.config(state=tk.DISABLED)
        self.progress_var.set(0)
        self.log_text.config(state='normal')
        self.log_text.delete("1.0", tk.END)
        self.log_text.config(state='disabled')
        self.log_messages = []
        threading.Thread(target=self.process_video, daemon=True).start()

    def load_whisper_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Faster Whisper."""
        try:
            self.log_message(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ({self.model_size}) –Ω–∞ {self.device}...")
            self.whisper_model = WhisperModel(
                self.model_size,
                device=self.device,
                compute_type="float16" if self.device == "cuda" else "int8"
            )
            self.log_message("–ú–æ–¥–µ–ª—å Whisper —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ Whisper: {e}")
            raise

    def extract_audio_in_chunks(self, video_path: str) -> Tuple[List[str], float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏."""
        self.log_message(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑: {video_path}")
        audio_chunks = []
        try:
            duration_command = [
                "ffprobe",
                "-v", "error",
                "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1",
                video_path
            ]
            duration_output, _ = self.run_subprocess_with_timeout(duration_command, 30, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ")
            total_duration = float(duration_output.strip())
            self.log_message(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")

            for start_time in range(0, int(total_duration), self.audio_extraction_chunk_size):
                end_time = min(start_time + self.audio_extraction_chunk_size, total_duration)
                duration = end_time - start_time
                timestamp = int(time.time())
                chunk_dir = os.path.join(self.process_temp_dir, f"audio_chunk_{start_time}_{timestamp}")
                os.makedirs(chunk_dir, exist_ok=True)
                chunk_filename = os.path.join(chunk_dir, f"audio_chunk_{start_time}_{timestamp}.mp3")

                self.extract_audio_chunk(video_path, chunk_filename, start_time, duration)
                audio_chunks.append(chunk_filename)
            return audio_chunks, total_duration

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            raise  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ process_video

    def transcribe_audio_in_chunks(self, audio_chunks: List[str], language: str) -> Tuple[List[Dict], int]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Faster Whisper."""
        all_segments = []
        total_words = 0
        if self.whisper_model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

        try:
            for i, chunk_path in enumerate(audio_chunks):
                self.log_message(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1}/{len(audio_chunks)}: {chunk_path}")
                segments, info = self.whisper_model.transcribe(
                    chunk_path,
                    language=language,
                    beam_size=5,
                    vad_filter=True,
                )
                for segment in segments:
                    all_segments.append({
                        'start': segment.start,
                        'end': segment.end,
                        'text': segment.text.strip()
                    })
                    total_words += len(segment.text.split())
                self.log_message(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                self.root.update()  # –û–±–Ω–æ–≤–ª—è–µ–º GUI

                self.remove_file_with_retry(chunk_path)
                self.remove_directory_with_retry(os.path.dirname(chunk_path))

            self.log_message(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤: {total_words}")
            return all_segments, total_words
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            raise

    def translate_and_refine_segments(self, segments: List[Dict]) -> Tuple[List[Dict], int]:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        translated_segments = []
        total_words_translated = 0
        translator = GoogleTranslator(source='auto', target=self.target_language)

        try:
            for segment in segments:
                self.log_message(f"–ü–µ—Ä–µ–≤–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞: '{segment['text'][:50]}...' –Ω–∞ {self.target_language}")
                translated_text = translator.translate(segment['text'])
                if not isinstance(translated_text, str):
                    self.log_message(
                        f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: translator.translate –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É. –¢–∏–ø: {type(translated_text)}, –ó–Ω–∞—á–µ–Ω–∏–µ: {translated_text}")
                    translated_text = ""  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                translated_segments.append({
                    'start': segment['start'],
                    'end': segment['end'],
                    'text': translated_text
                })
                total_words_translated += len(translated_text.split())
                self.log_message(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç: '{translated_text[:50]}...'")
            return translated_segments, total_words_translated
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            raise

    def generate_tts_audio_for_segments(self, translated_segments: List[Dict]) -> Tuple[Optional[str], List[Dict]]:
        """–°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ TTS –¥–ª—è –ø–∞–∫–µ—Ç–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤."""
        tts_chunks = []
        updated_segments = []
        total_duration = 0
        try:
            for i, segment in enumerate(translated_segments):
                text = segment['text']
                self.log_message(f"–°–æ–∑–¥–∞–Ω–∏–µ TTS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}/{len(translated_segments)}: '{text[:50]}...'")
                timestamp = int(time.time())
                tts_dir = os.path.join(self.process_temp_dir, f"tts_segment_dir_{i}_{timestamp}")
                os.makedirs(tts_dir, exist_ok=True)
                tts_filename = f"tts_segment_{i}_{timestamp}.mp3"
                tts_filepath = os.path.join(tts_dir, tts_filename)

                try:
                    tts = gTTS(text=text, lang=self.target_language)
                    with open(tts_filepath, 'wb') as tts_file:
                        tts.write_to_fp(tts_file)

                    tts_chunks.append(tts_filepath)
                    duration_command = [
                        "ffprobe",
                        "-v", "error",
                        "-show_entries", "format=duration",
                        "-of", "default=noprint_wrappers=1:nokey=1",
                        tts_filepath
                    ]
                    duration_output, _ = self.run_subprocess_with_timeout(duration_command, 30,
                                                                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ TTS")
                    segment_duration = float(duration_output.strip())
                    updated_segments.append({
                        'start': total_duration,
                        'end': total_duration + segment_duration,
                        'text': text,
                    })
                    total_duration += segment_duration
                except Exception as e:
                    self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TTS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i + 1}: {e}")
                    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                    for file in tts_chunks:
                        self.remove_file_with_retry(file)
                        self.remove_directory_with_retry(os.path.dirname(file))  # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                    return None, []  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –Ω–µ—É–¥–∞—á—É

                self.log_message(f"TTS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} —Å–æ–∑–¥–∞–Ω.")
                self.root.update()  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å GUI

            self.log_message(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {len(tts_chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ TTS...")
            if tts_chunks:
                merged_audio_path = os.path.join(self.process_temp_dir, f"merged_tts_audio_{int(time.time())}.mp3")
                self.merge_audio_chunks(tts_chunks, merged_audio_path)
                self.log_message(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ TTS: {merged_audio_path}")

                for tts_file in tts_chunks:
                    self.remove_file_with_retry(tts_file)
                    self.remove_directory_with_retry(os.path.dirname(tts_file))

                return merged_audio_path, updated_segments
            else:
                self.log_message("–°–µ–≥–º–µ–Ω—Ç—ã TTS –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
                return None, []

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è TTS: {e}")
            for file in tts_chunks:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.remove_file_with_retry(file)
                self.remove_directory_with_retry(os.path.dirname(file))  # –∏ –∫–∞—Ç–∞–ª–æ–≥
            return None, []

    def open_webpage(self, url):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        import webbrowser
        webbrowser.open(url)

if __name__ == "__main__":
    try:
        nltk.data.find('tokenizers/punkt')
    except LookupError:
        print("Downloading NLTK punkt tokenizer...")
        nltk.download('punkt')
    app = LinguoAIVideoVoicePro()
    app.root.mainloop()
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê video.py ---