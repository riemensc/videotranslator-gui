import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import ttkbootstrap as ttk
import os
import threading
import subprocess
import tempfile
from typing import Optional, List, Dict, Tuple
import time
import nltk
import torch
from faster_whisper import WhisperModel
from deep_translator import GoogleTranslator
import google.generativeai as genai
import shutil
import errno
from gtts import gTTS
import psutil


class LinguoAIVideoVoicePro:
    def __init__(self):
        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ---
        self.ffmpeg_timeout = 30
        self.process_timeout = 7200
        self.chunk_timeout = 600
        self.validate_chunk_timeout = 20
        self.audio_extraction_chunk_size = 60
        self.transcribe_chunk_size = 60
        self.tts_batch_size = 10
        self.model_size = "medium"
        self.target_language = "en"
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.gemini_api_key = ""
        self.tts_engine = "gtts"
        self.hw_accel_info = self.detect_hardware_acceleration()  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        self.hw_accel = self.hw_accel_info['accel'] if self.hw_accel_info else None

        # --- –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞—Ç—É—Å ---
        self.whisper_model: Optional[WhisperModel] = None
        self.current_process: Optional[subprocess.Popen] = None
        self.process_start_time: Optional[float] = None
        self.process_temp_dir: str = ""

        # --- GUI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ ---
        self.root = ttk.Window(themename="darkly")
        self.root.title("LinguoAI VideoVoice Pro")
        self.root.geometry("640x850")  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä

        self.source_file = tk.StringVar()
        self.target_file = tk.StringVar()
        self.selected_language = tk.StringVar(value="en")
        self.gemini_key = tk.StringVar()  # –ö–ª—é—á API Gemini
        self.progress_var = tk.DoubleVar(value=0)
        self.log_messages: List[str] = []

        self.languages = {
            "af": ("–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å", "üáøüá¶"),
            "sq": ("–ê–ª–±–∞–Ω—Å—å–∫–∞", "üá¶üá±"),
            "am": ("–ê–º—Ö–∞—Ä—Å—å–∫–∞", "üá™üáπ"),
            "ar": ("–ê—Ä–∞–±—Å—å–∫–∞", "üá∏üá¶"),
            "eu": ("–ë–∞—Å–∫—Å—å–∫–∞", "üá™üá∏"),
            "bn": ("–ë–µ–Ω–≥–∞–ª—å—Å—å–∫–∞", "üáßüá©"),
            "bs": ("–ë–æ—Å–Ω—ñ–π—Å—å–∫–∞", "üáßüá¶"),
            "bg": ("–ë–æ–ª–≥–∞—Ä—Å—å–∫–∞", "üáßüá¨"),
            "ca": ("–ö–∞—Ç–∞–ª–æ–Ω—Å—å–∫–∞", "üá¶üá©"),
            "zh-CN": ("–ö–∏—Ç–∞–π—Å—å–∫–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞)", "üá®üá≥"),
            "zh-TW": ("–ö–∏—Ç–∞–π—Å—å–∫–∞ (—Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞)", "üáπüáº"),
            "hr": ("–•–æ—Ä–≤–∞—Ç—Å—å–∫–∞", "üá≠üá∑"),
            "cs": ("–ß–µ—Å—å–∫–∞", "üá®üáø"),
            "da": ("–î–∞–Ω—Å—å–∫–∞", "üá©üá∞"),
            "nl": ("–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥—Å—å–∫–∞", "üá≥üá±"),
            "en": ("–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", "üá¨üáß"),
            "et": ("–ï—Å—Ç–æ–Ω—Å—å–∫–∞", "üá™üá™"),
            "tl": ("–§—ñ–ª—ñ–ø–ø—ñ–Ω—Å—å–∫–∞", "üáµüá≠"),
            "fi": ("–§—ñ–Ω—Å—å–∫–∞", "üá´üáÆ"),
            "fr": ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞", "üá´üá∑"),
            "gl": ("–ì–∞–ª—ñ—Å—ñ–π—Å—å–∫–∞", "üá™üá∏"),
            "de": ("–ù—ñ–º–µ—Ü—å–∫–∞", "üá©üá™"),
            "el": ("–ì—Ä–µ—Ü—å–∫–∞", "üá¨üá∑"),
            "gu": ("–ì—É–¥–∂–∞—Ä–∞—Ç—ñ", "üáÆüá≥"),
            "ha": ("–•–∞—É—Å–∞", "üá≥üá¨"),
            "he": ("–Ü–≤—Ä–∏—Ç", "üáÆüá±"),
            "hi": ("–ì—ñ–Ω–¥—ñ", "üáÆüá≥"),
            "hu": ("–£–≥–æ—Ä—Å—å–∫–∞", "üá≠üá∫"),
            "is": ("–Ü—Å–ª–∞–Ω–¥—Å—å–∫–∞", "üáÆüá∏"),
            "id": ("–Ü–Ω–¥–æ–Ω–µ–∑—ñ–π—Å—å–∫–∞", "üáÆüá©"),
            "it": ("–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞", "üáÆüáπ"),
            "ja": ("–Ø–ø–æ–Ω—Å—å–∫–∞", "üáØüáµ"),
            "jw": ("–Ø–≤–∞–Ω—Å—å–∫–∞", "üáÆüá©"),
            "kn": ("–ö–∞–Ω–Ω–∞–¥–∞", "üáÆüá≥"),
            "km": ("–ö—Ö–º–µ—Ä—Å—å–∫–∞", "üá∞üá≠"),
            "ko": ("–ö–æ—Ä–µ–π—Å—å–∫–∞", "üá∞üá∑"),
            "la": ("–õ–∞—Ç–∏–Ω–∞", "üáªüá¶"),
            "lv": ("–õ–∞—Ç–≤—ñ–π—Å—å–∫–∞", "üá±üáª"),
            "lt": ("–õ–∏—Ç–æ–≤—Å—å–∫–∞", "üá±üáπ"),
            "ms": ("–ú–∞–ª–∞–π—Å—å–∫–∞", "üá≤üáæ"),
            "mr": ("–ú–∞—Ä–∞—Ç—Ö—ñ", "üáÆüá≥"),
            "ml": ("–ú–∞–ª–∞—è–ª–∞–º", "üáÆüá≥"),
            "my": ("–ú'—è–Ω–º–∞ (–±—ñ—Ä–º–∞–Ω—Å—å–∫–∞)", "üá≤üá≤"),
            "ne": ("–ù–µ–ø–∞–ª—å—Å—å–∫–∞", "üá≥üáµ"),
            "no": ("–ù–æ—Ä–≤–µ–∑—å–∫–∞", "üá≥üá¥"),
            "pa": ("–ü–µ–Ω–¥–∂–∞–±—ñ", "üáÆüá≥"),
            "pl": ("–ü–æ–ª—å—Å—å–∫–∞", "üáµüá±"),
            "pt": ("–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å—å–∫–∞", "üáµüáπ"),
            "ro": ("–†—É–º—É–Ω—Å—å–∫–∞", "üá∑üá¥"),
            "ru": ("–†–æ—Å—ñ–π—Å—å–∫–∞", "üá∑üá∫"),
            "sr": ("–°–µ—Ä–±—Å—å–∫–∞", "üá∑üá∏"),
            "si": ("–°–∏–Ω–≥–∞–ª—å—Å—å–∫–∞", "üá±üá∞"),
            "sk": ("–°–ª–æ–≤–∞—Ü—å–∫–∞", "üá∏üá∞"),
            "sl": ("–°–ª–æ–≤–µ–Ω—Å—å–∫–∞", "üá∏üáÆ"),
            "es": ("–Ü—Å–ø–∞–Ω—Å—å–∫–∞", "üá™üá∏"),
            "su": ("–°—É–Ω–¥–∞–Ω—Å—å–∫–∞", "üáÆüá©"),
            "sw": ("–°—É–∞—Ö—ñ–ª—ñ", "üá∞üá™"),
            "sv": ("–®–≤–µ–¥—Å—å–∫–∞", "üá∏üá™"),
            "ta": ("–¢–∞–º—ñ–ª—å—Å—å–∫–∞", "üáÆüá≥"),
            "te": ("–¢–µ–ª—É–≥—É", "üáÆüá≥"),
            "th": ("–¢–∞–π—Å—å–∫–∞", "üáπüá≠"),
            "tr": ("–¢—É—Ä–µ—Ü—å–∫–∞", "üáπüá∑"),
            "uk": ("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∫üá¶"),
            "ur": ("–£—Ä–¥—É", "üáµüá∞"),
            "vi": ("–í'—î—Ç–Ω–∞–º—Å—å–∫–∞", "üáªüá≥"),
            "cy": ("–í–∞–ª–ª—ñ–π—Å—å–∫–∞", "üá¨üáß")
        }

        # --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
        self.setup_gui()
        self.setup_ffmpeg()
        self.load_api_keys_from_environment()
        self.load_whisper_model()
        if self.gemini_api_key:
            self.init_gemini()
        self.log_hardware_acceleration()

    def seconds_to_srt_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å–µ–∫—É–Ω–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É SRT (HH:MM:SS,mmm)."""
        milliseconds = int((seconds * 1000) % 1000)
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        return f"{int(hours):02}:{int(minutes):02}:{int(seconds):02},{milliseconds:03}"

    def create_srt_file(self, segments: List[Dict], output_path: str):
        """–°—Ç–≤–æ—Ä—é—î SRT-—Ñ–∞–π–ª –∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–æ–≤–∞–Ω–∏—Ö/–ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤."""
        try:
            with open(output_path, "w", encoding="utf-8") as f:
                for i, segment in enumerate(segments):
                    start_time = segment['start']
                    end_time = segment['end']
                    text = segment['text']

                    # –ö–æ–Ω–≤–µ—Ä—Ç—É–π—Ç–µ —Å–µ–∫—É–Ω–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É SRT
                    start_time_srt = self.seconds_to_srt_time(start_time)
                    end_time_srt = self.seconds_to_srt_time(end_time)

                    f.write(f"{i + 1}\n")
                    f.write(f"{start_time_srt} --> {end_time_srt}\n")
                    f.write(f"{text}\n\n")

            self.log_message(f"SRT-—Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: {output_path}")

        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ SRT-—Ñ–∞–π–ª—É: {e}")

    def log_hardware_acceleration(self):
        """–ü—Ä–æ—Ç–æ–∫–æ–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–ø–∞—Ä–∞—Ç–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è."""
        if self.hw_accel_info:
            self.log_message(f"–í–∏—è–≤–ª–µ–Ω–æ –∞–ø–∞—Ä–∞—Ç–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {self.hw_accel_info['accel']} ({self.hw_accel_info['info']})")
        else:
            self.log_message("–ê–ø–∞—Ä–∞—Ç–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")

    def detect_hardware_acceleration(self):
        """–í–∏—è–≤–ª—è—î –∞–ø–∞—Ä–∞—Ç–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è (NVIDIA, Intel, AMD)."""
        try:
            # NVIDIA
            try:
                subprocess.run(['nvidia-smi'], check=True, capture_output=True)
                return {'accel': 'cuda', 'info': '–í–∏—è–≤–ª–µ–Ω–æ GPU NVIDIA'}
            except (FileNotFoundError, subprocess.CalledProcessError):
                pass

            # Intel (Quick Sync)
            try:
                output = subprocess.run(['vainfo'], check=True, capture_output=True, text=True).stdout
                if "VA-API" in output:  # –î—É–∂–µ –≥—Ä—É–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, –º–æ–∂–Ω–∞ —É—Ç–æ—á–Ω–∏—Ç–∏
                    return {'accel': 'qsv', 'info': '–í–∏—è–≤–ª–µ–Ω–æ Intel Quick Sync'}
            except (FileNotFoundError, subprocess.CalledProcessError):
                pass

            # AMD (AMF)  - —Ç—Ä–æ—Ö–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–µ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ–º–∞—î –ø—Ä–æ—Å—Ç–æ–≥–æ "amfinfo"
            #  –ú–æ–∂–Ω–∞ —à—É–∫–∞—Ç–∏ –ø–µ–≤–Ω—ñ –¥—Ä–∞–π–≤–µ—Ä–∏/–ø—Ä–∏—Å—Ç—Ä–æ—ó, –∞–ª–µ —Ü–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –û–°.
            #  –¢—É—Ç –¥—É–∂–µ –ø—Ä–æ—Å—Ç–∞, –Ω–µ–ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è Linux:
            if os.name == 'posix':  # Linux/macOS
                try:
                    output = subprocess.run(['lspci', '-v'], check=True, capture_output=True, text=True).stdout
                    if "Advanced Micro Devices, Inc. [AMD/ATI]" in output:
                        return {'accel': 'h264_vaapi', 'info': '–í–∏—è–≤–ª–µ–Ω–æ GPU AMD (VAAPI)'}  # –ü—Ä–∏–ø—É—â–µ–Ω–Ω—è!
                except (FileNotFoundError, subprocess.CalledProcessError):
                    pass

            return None  # –ê–ø–∞—Ä–∞—Ç–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {e}")
            return None
    def init_gemini(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–æ–¥–µ–ª—å Gemini Pro."""
        try:
            genai.configure(api_key=self.gemini_api_key)
            self.model = genai.GenerativeModel('gemini-pro')
            self.log_message("–ú–æ–¥–µ–ª—å Gemini Pro —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Gemini Pro: {e}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ Gemini", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Gemini Pro: {e}")
            self.model = None  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ None —É —Ä–∞–∑—ñ –Ω–µ–≤–¥–∞—á—ñ

    def check_process_timeout(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤–∏—â–∏–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —á–∞—Å."""
        if self.process_start_time and time.time() - self.process_start_time > self.process_timeout:
            if self.current_process:
                self.log_message(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–æ—Ü–µ—Å—É! –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É (PID: {self.current_process.pid})...")
                self.kill_process_tree(self.current_process.pid)  # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—ñ–≤!
            raise TimeoutError("–ü—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤–∏—â–∏–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —á–∞—Å")

    def kill_process_tree(self, pid):
        """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å —Ç–∞ –≤—Å—ñ –π–æ–≥–æ –¥–æ—á—ñ—Ä–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏."""
        try:
            parent = psutil.Process(pid)
            for child in parent.children(recursive=True):  # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –¥—ñ—Ç–µ–π/–æ–Ω—É–∫—ñ–≤
                self.log_message(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ—á—ñ—Ä–Ω—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É: {child.pid}")
                child.kill()
            self.log_message(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É: {parent.pid}")
            parent.kill()
        except psutil.NoSuchProcess:
            self.log_message(f"–ü—Ä–æ—Ü–µ—Å –∑ PID {pid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤: {e}")

    def run_subprocess_with_timeout(self, command, timeout, error_message):
        """–ó–∞–ø—É—Å–∫–∞—î –ø—ñ–¥–ø—Ä–æ—Ü–µ—Å –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."""
        try:
            self.log_message(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑ —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}: {' '.join(command)}")
            self.current_process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            self.log_message(f"–ü—Ä–æ—Ü–µ—Å –∑–∞–ø—É—â–µ–Ω–æ –∑ PID: {self.current_process.pid}")

            start_time = time.time()
            last_output_time = start_time

            stdout, stderr = self.current_process.communicate(timeout=timeout)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ communicate!
            retcode = self.current_process.returncode

            if retcode != 0:
                self.log_message(f"–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏ {retcode}:")
                self.log_message(f"Stdout: {stdout}")
                self.log_message(f"Stderr: {stderr}")
                raise subprocess.CalledProcessError(retcode, command, stdout, stderr)

            self.log_message("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
            return stdout, stderr

        except subprocess.TimeoutExpired:
            self.log_message(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–æ—Ü–µ—Å—É –ø—ñ—Å–ª—è {timeout} —Å–µ–∫—É–Ω–¥")
            self.kill_process_tree(self.current_process.pid)  # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—ñ–≤!
            stdout, stderr = self.current_process.communicate()  # –û—Ç—Ä–∏–º–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π –∑–∞–ª–∏—à–∫–æ–≤–∏–π –≤–∏–≤—ñ–¥
            self.log_message(f"Stdout: {stdout}")
            self.log_message(f"Stderr: {stderr}")
            raise TimeoutError(error_message)

        except Exception as e:
            self.log_message(f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            if self.current_process:
                self.kill_process_tree(self.current_process.pid)  # –ó–∞–≤–µ—Ä—à–∏—Ç–∏, —è–∫—â–æ –≤—Å–µ —â–µ –∑–∞–ø—É—â–µ–Ω–æ
            raise
        finally:
            self.current_process = None

    def extract_audio_chunk(self, video_path, audio_path, start_time, duration):
        """–í–∏—Ç—è–≥—É—î —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ."""
        command = [
            "ffmpeg",
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –±–µ–∑ –∑–∞–ø–∏—Ç—É
            "-ss", str(start_time),
            "-i", video_path,
            "-t", str(duration),
            "-vn",  # –í–∏–º–∫–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ
            "-acodec", "libmp3lame",
            "-q:a", "2",  # –ì–∞—Ä–Ω–∞ —è–∫—ñ—Å—Ç—å MP3
            "-loglevel", "error",  # –ó–º–µ–Ω—à–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é
            audio_path
        ]
        if self.hw_accel:
            command.insert(1, "-hwaccel")
            command.insert(2, self.hw_accel)

        try:
            self.run_subprocess_with_timeout(command, self.chunk_timeout, "–¢–∞–π–º–∞—É—Ç –≤–∏–ª—É—á–µ–Ω–Ω—è –∞—É–¥—ñ–æ")
            self.log_message(f"–§—Ä–∞–≥–º–µ–Ω—Ç –∞—É–¥—ñ–æ –≤–∏–ª—É—á–µ–Ω–æ: '{audio_path}'")
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–ª—É—á–µ–Ω–Ω—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∞—É–¥—ñ–æ: {e}")
            raise

    def batch_segments(self, segments: List[Dict]) -> List[List[Dict]]:
        """–†–æ–∑–¥—ñ–ª—è—î —Å–µ–≥–º–µ–Ω—Ç–∏ –Ω–∞ –º–µ–Ω—à—ñ –ø–∞–∫–µ—Ç–∏ –¥–ª—è TTS."""
        batched_segments = []
        for i in range(0, len(segments), self.tts_batch_size):
            batch = segments[i:i + self.tts_batch_size]
            batched_segments.append(batch)
        return batched_segments

    def validate_audio_chunk(self, chunk_path: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∞—É–¥—ñ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ffprobe."""
        command = [
            "ffprobe",
            "-v", "error",
            "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1",
            chunk_path
        ]
        try:
            stdout, stderr = self.run_subprocess_with_timeout(
                command,
                self.validate_chunk_timeout,
                f"–¢–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∞—É–¥—ñ–æ: {chunk_path}"
            )
            if stdout.strip():
                self.log_message(f"–§—Ä–∞–≥–º–µ–Ω—Ç –∞—É–¥—ñ–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {chunk_path}")
                return True
            else:
                self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∞—É–¥—ñ–æ (–Ω–µ–º–∞—î —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ): {chunk_path}")
                return False
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∞—É–¥—ñ–æ {chunk_path}: {e}")
            return False

    def merge_audio_chunks(self, audio_chunks, output_path):
        """–ó–ª–∏–≤–∞—î –∫—ñ–ª—å–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –∞—É–¥—ñ–æ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é FFmpeg."""
        if not audio_chunks:
            self.log_message("–ù–µ–º–∞—î —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –∞—É–¥—ñ–æ –¥–ª—è –∑–ª–∏—Ç—Ç—è.")
            return

        valid_chunks = [chunk for chunk in audio_chunks if self.validate_audio_chunk(chunk)]
        if not valid_chunks:
            self.log_message("–ù–µ–º–∞—î –¥—ñ–π—Å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –∞—É–¥—ñ–æ –¥–ª—è –∑–ª–∏—Ç—Ç—è.")
            return

        timestamp = int(time.time())
        temp_dir = os.path.join(tempfile.gettempdir(), f"audio_merge_temp_{timestamp}")
        os.makedirs(temp_dir, exist_ok=True)

        list_file_path = os.path.join(temp_dir, "chunk_list.txt")
        try:
            with open(list_file_path, "w") as f:
                for chunk_path in valid_chunks:
                    abs_chunk_path = os.path.abspath(chunk_path)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
                    f.write(f"file '{abs_chunk_path}'\n")

            command = [
                "ffmpeg",
                "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏
                "-f", "concat",
                "-safe", "0",  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ –∑ concat
                "-i", list_file_path,
                "-c", "copy",
                "-loglevel", "error",
                output_path
            ]
            if self.hw_accel:
                command.insert(1, "-hwaccel")
                command.insert(2, self.hw_accel)

            # –†–æ–∑—Ä–∞—Ö—É–π—Ç–µ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤.
            merge_timeout = len(valid_chunks) * 10 + 30  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç + 30 –±–∞–∑–æ–≤–∏—Ö
            self.run_subprocess_with_timeout(command, merge_timeout, "–¢–∞–π–º–∞—É—Ç –∑–ª–∏—Ç—Ç—è –∞—É–¥—ñ–æ")
            self.log_message(f"–§—Ä–∞–≥–º–µ–Ω—Ç–∏ –∞—É–¥—ñ–æ –∑–ª–∏—Ç–æ: '{output_path}'")

        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–ª–∏—Ç—Ç—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –∞—É–¥—ñ–æ: {e}")
            raise
        finally:
            self.remove_file_with_retry(list_file_path)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ–≤—Ç–æ—Ä—É
            self.remove_directory_with_retry(temp_dir)  # —ñ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥—É

    def merge_video_audio(self, audio_file):
        """–ó–ª–∏–≤–∞—î –∫—ñ–Ω—Ü–µ–≤–µ –∞—É–¥—ñ–æ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –≤—ñ–¥–µ–æ."""
        try:
            output_path = self.target_file.get()
            video_path = self.source_file.get()

            # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ffprobe
            duration_command = [
                "ffprobe",
                "-v", "error",
                "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1",
                video_path
            ]
            duration_output, _ = self.run_subprocess_with_timeout(duration_command, 30, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ")
            total_duration = float(duration_output.strip())
            self.log_message(f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –∑–ª–∏—Ç—Ç—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")

            # –†–æ–∑—Ä–∞—Ö—É–π—Ç–µ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3x —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å + 120 —Å–µ–∫—É–Ω–¥)
            dynamic_timeout = int(3 * total_duration + 120)
            self.log_message(f"–î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–ª–∏—Ç—Ç—è: {dynamic_timeout} —Å–µ–∫—É–Ω–¥")

            command = [
                'ffmpeg',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
                '-i', video_path,
                '-i', audio_file,
                '-c:v', 'h264_nvenc' if self.hw_accel == 'cuda' else 'libx264',  # H.265
                '-c:a', 'aac',
                '-map', '0:v:0',
                '-map', '1:a:0',
                '-shortest',  # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π –ø–æ—Ç—ñ–∫
                output_path
            ]
            if self.hw_accel:
                command.insert(1, "-hwaccel")
                command.insert(2, self.hw_accel)

            self.run_subprocess_with_timeout(command, dynamic_timeout, "–¢–∞–π–º–∞—É—Ç –∑–ª–∏—Ç—Ç—è –≤—ñ–¥–µ–æ —Ç–∞ –∞—É–¥—ñ–æ")
            self.log_message(f"–í—ñ–¥–µ–æ —Ç–∞ –∞—É–¥—ñ–æ –∑–ª–∏—Ç–æ: {output_path}")
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–ª–∏—Ç—Ç—è –≤—ñ–¥–µ–æ —Ç–∞ –∞—É–¥—ñ–æ: {e}")
            raise

    def shorten_text_with_gemini(self, text: str) -> str:
        """–°–∫–æ—Ä–æ—á—É—î —Ç–µ–∫—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini Pro, –æ–±—Ä–æ–±–ª—è—é—á–∏ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ."""
        if self.model is None:
            self.log_message("–ú–æ–¥–µ–ª—å Gemini Pro –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è.")
            return text

        try:
            prompt = f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–æ—Ç—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:\n\n{text}"
            time.sleep(1.5)  # –û–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ: –ü–∞—É–∑–∞ 1.5 —Å–µ–∫—É–Ω–¥–∏
            response = self.model.generate_content(prompt)
            if response and response.text:
                shortened_text = response.text
                self.log_message("–¢–µ–∫—Å—Ç —Å–∫–æ—Ä–æ—á–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini Pro.")
                return shortened_text
            else:
                self.log_message("Gemini Pro –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç.")
                return text
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini: {e}")
            return text

    def process_video(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ."""
        self.process_start_time = time.time()
        timestamp = int(time.time())
        self.process_temp_dir = os.path.join(tempfile.gettempdir(), f"process_temp_{timestamp}")
        os.makedirs(self.process_temp_dir, exist_ok=True)

        try:
            self.log_message("–†–æ–∑–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ...")
            self.progress_var.set(5)

            # –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞–π–º–∞—É—Ç—É *–ø–µ—Ä–µ–¥* –ø–æ—á–∞—Ç–∫–æ–º –±—É–¥—å-—è–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å.
            def check_timeout():
                self.check_process_timeout()
                self.root.after(1000, check_timeout)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É

            check_timeout()  # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞–π–º–∞—É—Ç—É

            self.progress_var.set(10)
            audio_chunks, total_duration = self.extract_audio_in_chunks(self.source_file.get())
            self.progress_var.set(25)

            segments, total_words_original = self.transcribe_audio_in_chunks(audio_chunks, self.target_language)
            if not segments:
                raise Exception("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è.")
            self.progress_var.set(45)

            translated_segments, total_words_translated = self.translate_and_refine_segments(segments)

            # --- –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É Gemini (–ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ) ---
            total_words_shortened = 0
            if self.gemini_api_key and self.model:
                shortened_segments = []
                for segment in translated_segments:
                    shortened_text = self.shorten_text_with_gemini(segment['text'])
                    shortened_segments.append({
                        'start': segment['start'],
                        'end': segment['end'],
                        'text': shortened_text
                    })
                    total_words_shortened += len(shortened_text.split())
                    self.root.update()  # –û–Ω–æ–≤–∏—Ç–∏ GUI
                translated_segments = shortened_segments

                shortening_change = (
                    ((total_words_translated - total_words_shortened) / total_words_translated) * 100
                    if total_words_translated else 0
                )
                self.log_message(f"–°–∫–æ—Ä–æ—á–µ–Ω–Ω—è –∑–º–µ–Ω—à–∏–ª–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞: {shortening_change:.2f}%")
            else:
                total_words_shortened = total_words_translated
                self.log_message("–ö–ª—é—á API Gemini –Ω–µ –Ω–∞–¥–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è.")

            self.progress_var.set(60)

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SRT-—Ñ–∞–π–ª—É (–ø—Ä–∏–∫–ª–∞–¥)
            srt_output_path = os.path.splitext(self.target_file.get())[0] + ".srt"  # –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞–∑–≤–∏ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
            self.create_srt_file(translated_segments, srt_output_path)

            # --- –ó–≤—ñ—Ç –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ ---
            if total_words_original > 0:
                translation_change = (total_words_translated / total_words_original) * 100
                self.log_message(f"–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: {total_words_original}")
                self.log_message(f"–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: {total_words_translated}")
                self.log_message(f"–ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É: {translation_change:.2f}%")
            else:
                self.log_message("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é. –ü—Ä–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤—ñ–¥—Å–æ—Ç–æ–∫.")

            # --- TTS —Ç–∞ –∑–ª–∏—Ç—Ç—è –∞—É–¥—ñ–æ ---
            batched_translated_segments = self.batch_segments(translated_segments)
            all_updated_segments = []
            merged_audio_files = []

            for i, batch in enumerate(batched_translated_segments):
                self.log_message(f"–û–±—Ä–æ–±–∫–∞ –ø–∞–∫–µ—Ç–∞ TTS {i+1}/{len(batched_translated_segments)}")
                merged_audio_path, updated_segments = self.generate_tts_audio_for_segments(batch)
                if merged_audio_path:
                    all_updated_segments.extend(updated_segments)
                    merged_audio_files.append(merged_audio_path)
                else:
                    self.log_message(f"–ü–∞–∫–µ—Ç TTS {i+1} –Ω–µ –≤–¥–∞–ª–æ—Å—è.")
                    # –û—á–∏—Å—Ç–∏—Ç–∏ *–≤—Å—ñ* —Ä–∞–Ω—ñ—à–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ TTS —É —Ä–∞–∑—ñ –Ω–µ–≤–¥–∞—á—ñ
                    for file_path in merged_audio_files:
                        self.remove_file_with_retry(file_path)
                    raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ TTS –¥–ª—è –ø–∞–∫–µ—Ç–∞ {i + 1}.")

            # --- –ö—ñ–Ω—Ü–µ–≤–µ –∑–ª–∏—Ç—Ç—è –∞—É–¥—ñ–æ (—è–∫—â–æ –∫—ñ–ª—å–∫–∞ –ø–∞–∫–µ—Ç—ñ–≤) ---
            if len(merged_audio_files) > 1:
                final_merged_audio_path = os.path.join(self.process_temp_dir,
                                                        f"final_merged_tts_audio_{timestamp}.mp3")
                self.merge_audio_chunks(merged_audio_files, final_merged_audio_path)
                self.log_message(f"–ö—ñ–Ω—Ü–µ–≤–µ –∑–ª–∏—Ç–µ –∞—É–¥—ñ–æ TTS: {final_merged_audio_path}")
            elif merged_audio_files:
                final_merged_audio_path = merged_audio_files[0]
                self.log_message(f"–ö—ñ–Ω—Ü–µ–≤–µ –∑–ª–∏—Ç–µ –∞—É–¥—ñ–æ TTS (–æ–¥–∏–Ω –ø–∞–∫–µ—Ç): {final_merged_audio_path}")
            else:
                raise Exception("–ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞—É–¥—ñ–æ TTS.")

            # --- –û—á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ñ–∞–π–ª–∏ TTS ---
            for file_path in merged_audio_files:
                if file_path != final_merged_audio_path:  # –ù–µ –≤–∏–¥–∞–ª—è–π—Ç–µ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ñ–∞–π–ª!
                    self.remove_file_with_retry(file_path)

            self.progress_var.set(80)

            # --- –ö—ñ–Ω—Ü–µ–≤–µ –∑–ª–∏—Ç—Ç—è –≤—ñ–¥–µ–æ/–∞—É–¥—ñ–æ ---
            self.merge_video_audio(final_merged_audio_path)
            self.progress_var.set(95)

            self.log_message("–û–±—Ä–æ–±–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ")
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–û–±—Ä–æ–±–∫—É –≤—ñ–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


        except TimeoutError as e:
            self.log_message(f"–¢–∞–π–º–∞—É—Ç –æ–±—Ä–æ–±–∫–∏: {str(e)}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–¢–∞–π–º–∞—É—Ç –æ–±—Ä–æ–±–∫–∏: {str(e)}")
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–û–±—Ä–æ–±–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {str(e)}")
        finally:
            # --- –û—á–∏—â–µ–Ω–Ω—è ---
            self.progress_var.set(0)
            self.process_start_time = None
            self.current_process = None
            self.start_button.config(state=tk.NORMAL)  # –ó–Ω–æ–≤—É –≤–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É
            self.remove_directory_with_retry(self.process_temp_dir)

    def remove_file_with_retry(self, file_path, retries=3, delay=0.5):
        """–í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª, –ø–æ–≤—Ç–æ—Ä—é—é—á–∏ —Å–ø—Ä–æ–±–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏."""
        file_path = os.path.abspath(file_path)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
        for i in range(retries):
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                self.log_message(f"–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {file_path}")
                return  # –£—Å–ø—ñ—Ö
            except OSError as e:
                if e.errno == errno.ENOENT:  # –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ
                    self.log_message(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ): {file_path}")
                    return
                if i < retries - 1:  # –ù–µ —á–µ–∫–∞–π—Ç–µ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é —Å–ø—Ä–æ–±—É
                    self.log_message(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ({i+1}/{retries}): {file_path}")
                    time.sleep(delay)
                else:
                    self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±: {file_path} - {e}")
            except Exception as e:
                self.log_message(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {file_path} - {e}")
                return  # –ù–µ –ø–æ–≤—Ç–æ—Ä—é–π—Ç–µ —Å–ø—Ä–æ–±–∏ –¥–ª—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫

    def remove_directory_with_retry(self, dir_path, retries=5, delay=1):
        """–í–∏–¥–∞–ª—è—î –∫–∞—Ç–∞–ª–æ–≥, –ø–æ–≤—Ç–æ—Ä—é—é—á–∏ —Å–ø—Ä–æ–±–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ (–æ—Å–æ–±–ª–∏–≤–æ –¥–ª—è –Ω–µ–ø—É—Å—Ç–∏—Ö)."""
        dir_path = os.path.abspath(dir_path)
        for i in range(retries):
            try:
                if os.path.exists(dir_path):
                    shutil.rmtree(dir_path)
                self.log_message(f"–ö–∞—Ç–∞–ª–æ–≥ –≤–∏–¥–∞–ª–µ–Ω–æ: {dir_path}")
                return
            except OSError as e:
                if e.errno == errno.ENOENT:  # –ö–∞—Ç–∞–ª–æ–≥ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ
                    self.log_message(f"–ö–∞—Ç–∞–ª–æ–≥ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ: {dir_path}")
                    return
                elif e.errno == errno.ENOTEMPTY:  # –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç–∏–π
                    self.log_message(f"–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç–∏–π, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ({i+1}/{retries}): {dir_path}")
                    time.sleep(delay)
                else:
                    self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É: {dir_path} - {e}")
                    time.sleep(delay)  # –ß–µ–∫–∞–π—Ç–µ –Ω–∞–≤—ñ—Ç—å –Ω–∞ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏
            except Exception as e:
                self.log_message(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É: {dir_path} - {e}")
                return

    def setup_ffmpeg(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π FFmpeg."""
        try:
            self.run_subprocess_with_timeout(['ffmpeg', '-version'], 10, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ FFmpeg –Ω–µ –≤–¥–∞–ª–∞—Å—è")
            self.ffmpeg_available = True
            self.log_message("FFmpeg –≤–∏—è–≤–ª–µ–Ω–æ.")
        except FileNotFoundError:
            self.ffmpeg_available = False
            self.log_message("FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å FFmpeg.")
            messagebox.showwarning("FFmpeg –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", "–ü–æ—Ç—Ä—ñ–±–µ–Ω FFmpeg. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ.")
        except Exception as e:
            self.ffmpeg_available = False
            self.log_message(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ FFmpeg –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")
            messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞ FFmpeg", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ FFmpeg –Ω–µ –≤–¥–∞–ª–∞—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    def setup_gui(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        title_label = ttk.Label(header_frame, text="üé¨ LinguoAI VideoVoice Pro", font=('Helvetica', 16, 'bold'))
        title_label.pack()

        # --- –í–∏–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤ ---
        file_frame = ttk.LabelFrame(main_frame, text="–í—ñ–¥–µ–æ—Ñ–∞–π–ª–∏", padding="10")
        file_frame.pack(fill=tk.X, pady=5)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—ñ—Ç–∫–æ–≤–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—è–¥–∫—ñ–≤ –≤–≤–æ–¥—É/–≤–∏–≤–æ–¥—É
        source_frame = ttk.Frame(file_frame)
        source_frame.pack(fill=tk.X, pady=2)
        ttk.Label(source_frame, text="üìπ –í—Ö—ñ–¥–Ω–∏–π:", width=10).grid(row=0, column=0, padx=5, sticky=tk.W)
        self.source_entry = ttk.Entry(source_frame, textvariable=self.source_file, width=40)
        self.source_entry.grid(row=0, column=1, padx=5, sticky=tk.EW)
        ttk.Button(source_frame, text="–û–≥–ª—è–¥", command=self.browse_source, style="Accent.TButton").grid(row=0, column=2, padx=5)

        target_frame = ttk.Frame(file_frame)
        target_frame.pack(fill=tk.X, pady=2)
        ttk.Label(target_frame, text="üíæ –í–∏—Ö—ñ–¥–Ω–∏–π:", width=10).grid(row=0, column=0, padx=5, sticky=tk.W)
        self.target_entry = ttk.Entry(target_frame, textvariable=self.target_file, width=40)
        self.target_entry.grid(row=0, column=1, padx=5, sticky=tk.EW)
        ttk.Button(target_frame, text="–û–≥–ª—è–¥", command=self.browse_target, style="Accent.TButton").grid(row=0, column=2, padx=5)

        # –ó—Ä–æ–±—ñ—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–∏–º–∏
        source_frame.columnconfigure(1, weight=1)
        target_frame.columnconfigure(1, weight=1)


        # --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
        lang_frame = ttk.LabelFrame(main_frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É", padding="10")
        lang_frame.pack(fill=tk.X, pady=5)

        lang_combo_frame = ttk.Frame(lang_frame)
        lang_combo_frame.pack(fill=tk.X, pady=2)
        ttk.Label(lang_combo_frame, text="üó£Ô∏è –¶—ñ–ª—å–æ–≤–∞ –º–æ–≤–∞:").pack(side=tk.LEFT, padx=5)

        # –ü–æ—à—É–∫–æ–≤–∏–π Combobox
        self.language_search_var = tk.StringVar()
        self.language_search_var.trace("w", self.update_language_list)
        self.language_search_entry = ttk.Entry(lang_combo_frame, textvariable=self.language_search_var)
        self.language_search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.lang_combo = ttk.Combobox(
            lang_combo_frame,
            values=[f"{flag} {name}" for code, (name, flag) in self.languages.items()],
            state="readonly"
        )
        self.lang_combo.pack(side=tk.LEFT, fill=tk.X, expand=False, padx=5)
        self.lang_combo.set("üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞")  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è combobox
        self.language_search_entry.bind("<Return>", (lambda event: self.lang_combo.focus()))
        self.lang_combo.bind("<<ComboboxSelected>>", self.on_language_selected)

        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–ª–∏—Ç—Ç—è ---
        options_frame = ttk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–ª–∏—Ç—Ç—è", padding="10")
        options_frame.pack(fill=tk.X, pady=5)

        # –ö–ª—é—á API Gemini
        brain_frame = ttk.Frame(options_frame)
        brain_frame.pack(fill=tk.X, pady=2)

        # --- –û–ø–∏—Å –∫–ª—é—á–∞ API Gemini ---
        gemini_description_label = ttk.Label(
            brain_frame,
            wraplength=600,  # –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏ —Ç–µ–∫—Å—Ç
            justify=tk.LEFT,  # –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ –ª—ñ–≤–æ–º—É –∫—Ä–∞—é
            text="–¶—è –ø—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Google Gemini Pro API –¥–ª—è –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.  "
                 "–¶–µ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑–º–µ–Ω—à–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–∏ —Ü—å–æ–º—É –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n"
                 "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–ª—é—á API.  –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –∫–ª—é—á–∞, –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫, "
                 "—ñ –ø—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å —Ä–æ–±–æ—Ç—É –±–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è."
        )
        gemini_description_label.pack(side=tk.TOP, fill=tk.X, pady=(0, 5))

        gemini_link_label = ttk.Label(
            brain_frame,
            text="–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á API Gemini —Ç—É—Ç: ",
            foreground="dodgerblue",  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ –±—ñ–ª—å—à —Ç–æ–Ω–∫–∏–π —Å–∏–Ω—ñ–π
            cursor="hand2"  # –ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ
        )
        gemini_link_label.pack(side=tk.TOP, fill=tk.X)
        gemini_link_label.bind("<Button-1>", lambda e: self.open_webpage("https://makersuite.google.com/app/apikey"))

        self.gemini_key_label = ttk.Label(brain_frame, text="–ö–ª—é—á API Gemini:")
        self.gemini_key_label.pack(side=tk.LEFT, padx=5)
        self.gemini_key_entry = ttk.Entry(brain_frame, textvariable=self.gemini_key, width=30, show="*")
        self.gemini_key_entry.pack(side=tk.LEFT)

        self.start_button = ttk.Button(options_frame, text="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É", command=self.start_processing,
                                       style="Success.TButton")
        self.start_button.pack(pady=10)

        # --- –ü—Ä–æ–≥—Ä–µ—Å ---
        progress_frame = ttk.LabelFrame(main_frame, text="–ü—Ä–æ–≥—Ä–µ—Å", padding="10")
        progress_frame.pack(fill=tk.X, pady=5)
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100,
                                            style="Success.Horizontal.TProgressbar")
        self.progress_bar.pack(fill=tk.X, pady=5)
        self.status_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤–∏–π")
        self.status_label.pack()

        # --- –ñ—É—Ä–Ω–∞–ª ---
        log_frame = ttk.LabelFrame(main_frame, text="–ñ—É—Ä–Ω–∞–ª –æ–±—Ä–æ–±–∫–∏", padding="10")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        self.log_text = scrolledtext.ScrolledText(log_frame, height=6, state='disabled', wrap=tk.WORD)  # –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Å–ª—ñ–≤
        self.log_text.pack(fill=tk.BOTH, expand=True)

    def on_language_selected(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–≤–∏ –∑ combobox."""
        selected_lang_str = self.lang_combo.get()
        for code, (name, flag) in self.languages.items():
            if f"{flag} {name}" == selected_lang_str:
                self.target_language = code  # –û–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É
                self.log_message(f"–í–∏–±—Ä–∞–Ω–æ —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É: {name} ({code})")
                break

    def update_language_list(self, *args):
        """–§—ñ–ª—å—Ç—Ä—É—î —Å–ø–∏—Å–æ–∫ –º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É."""
        search_term = self.language_search_var.get().lower()
        filtered_languages = [
            f"{flag} {name}"
            for code, (name, flag) in self.languages.items()
            if search_term in name.lower() or search_term in code.lower() or search_term in flag.lower()
        ]
        self.lang_combo['values'] = filtered_languages
        if filtered_languages:
            self.lang_combo.set(filtered_languages[0])  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–µ—Ä—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
        else:
            self.lang_combo.set('')  # –û—á–∏—Å—Ç–∏—Ç–∏, —è–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π
    def browse_source(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –≤—ñ–¥–µ–æ."""
        filename = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ—Ñ–∞–π–ª",
            filetypes=[("–í—ñ–¥–µ–æ—Ñ–∞–π–ª–∏", "*.mp4 *.avi *.mkv *.mov"), ("–£—Å—ñ —Ñ–∞–π–ª–∏", "*.*")]
        )
        if filename:
            self.source_file.set(filename)
            base = os.path.splitext(filename)[0]
            self.target_file.set(f"{base}_translated.mp4")
            self.source_entry.xview_moveto(1) #–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –∫—ñ–Ω—Ü—è
            self.target_entry.xview_moveto(1)

    def browse_target(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–±–æ—Ä—É —à–ª—è—Ö—É –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –≤—ñ–¥–µ–æ."""
        filename = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–µ –≤—ñ–¥–µ–æ",
            defaultextension=".mp4",
            filetypes=[("MP4 —Ñ–∞–π–ª–∏", "*.mp4")]
        )
        if filename:
            self.target_file.set(filename)
            self.source_entry.xview_moveto(1)  # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –∫—ñ–Ω—Ü—è
            self.target_entry.xview_moveto(1)
    def log_message(self, message):
        """–ó–∞–ø–∏—Å—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ GUI —Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É –∂—É—Ä–Ω–∞–ª—É."""
        self.log_messages.append(message)
        self.log_text.config(state='normal')  # –¢–∏–º—á–∞—Å–æ–≤–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state='disabled')  # –ó–Ω–æ–≤—É –≤–∏–º–∫–Ω—É—Ç–∏
        self.status_label.config(text=message)
        self.root.update_idletasks()

    def load_api_keys_from_environment(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–ª—é—á—ñ API –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."""
        self.gemini_api_key = os.environ.get("GEMINI_API_KEY", "")
        self.gemini_key.set(self.gemini_api_key)  # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ GUI

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫–∞—î –æ–±—Ä–æ–±–∫—É –≤—ñ–¥–µ–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
        if not self.ffmpeg_available:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–æ—Ç—Ä—ñ–±–µ–Ω FFmpeg!")
            return
        if not self.source_file.get() or not self.target_file.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –≤—Ö—ñ–¥–Ω–∏–π —Ç–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª–∏.")
            return

        try:
            lang_str = self.lang_combo.get()
            self.target_language = next(
                (code for code, (name, flag) in self.languages.items() if f"{flag} {name}" == lang_str), None
            )
            if self.target_language is None:
                raise ValueError("–í–∏–±—Ä–∞–Ω–æ –Ω–µ–¥—ñ–π—Å–Ω—É –º–æ–≤—É.")
        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))
            return

        self.gemini_api_key = self.gemini_key.get()
        if self.gemini_api_key:
            self.init_gemini()
        else:
            self.log_message("–ö–ª—é—á API Gemini –Ω–µ –Ω–∞–¥–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è.")

        self.start_button.config(state=tk.DISABLED)
        self.progress_var.set(0)
        self.log_text.config(state='normal')
        self.log_text.delete("1.0", tk.END)
        self.log_text.config(state='disabled')
        self.log_messages = []
        threading.Thread(target=self.process_video, daemon=True).start()

    def load_whisper_model(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–æ–¥–µ–ª—å Faster Whisper."""
        try:
            self.log_message(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Whisper ({self.model_size}) –Ω–∞ {self.device}...")
            self.whisper_model = WhisperModel(
                self.model_size,
                device=self.device,
                compute_type="float16" if self.device == "cuda" else "int8"
            )
            self.log_message("–ú–æ–¥–µ–ª—å Whisper —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Whisper: {e}")
            raise

    def extract_audio_in_chunks(self, video_path: str) -> Tuple[List[str], float]:
        """–í–∏—Ç—è–≥—É—î –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏."""
        self.log_message(f"–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∑: {video_path}")
        audio_chunks = []
        try:
            duration_command = [
                "ffprobe",
                "-v", "error",
                "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1",
                video_path
            ]
            duration_output, _ = self.run_subprocess_with_timeout(duration_command, 30, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ")
            total_duration = float(duration_output.strip())
            self.log_message(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")

            for start_time in range(0, int(total_duration), self.audio_extraction_chunk_size):
                end_time = min(start_time + self.audio_extraction_chunk_size, total_duration)
                duration = end_time - start_time
                timestamp = int(time.time())
                chunk_dir = os.path.join(self.process_temp_dir, f"audio_chunk_{start_time}_{timestamp}")
                os.makedirs(chunk_dir, exist_ok=True)
                chunk_filename = os.path.join(chunk_dir, f"audio_chunk_{start_time}_{timestamp}.mp3")

                self.extract_audio_chunk(video_path, chunk_filename, start_time, duration)
                audio_chunks.append(chunk_filename)
            return audio_chunks, total_duration

        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–ª—É—á–µ–Ω–Ω—è –∞—É–¥—ñ–æ: {e}")
            raise  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–∏–Ω—É—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ process_video

    def transcribe_audio_in_chunks(self, audio_chunks: List[str], language: str) -> Tuple[List[Dict], int]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—î —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∞—É–¥—ñ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Faster Whisper."""
        all_segments = []
        total_words = 0
        if self.whisper_model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

        try:
            for i, chunk_path in enumerate(audio_chunks):
                self.log_message(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1}/{len(audio_chunks)}: {chunk_path}")
                segments, info = self.whisper_model.transcribe(
                    chunk_path,
                    language=language,
                    beam_size=5,
                    vad_filter=True,
                )
                for segment in segments:
                    all_segments.append({
                        'start': segment.start,
                        'end': segment.end,
                        'text': segment.text.strip()
                    })
                    total_words += len(segment.text.split())
                self.log_message(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                self.root.update()  # –û–Ω–æ–≤–∏—Ç–∏ GUI

                self.remove_file_with_retry(chunk_path)
                self.remove_directory_with_retry(os.path.dirname(chunk_path))

            self.log_message(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–æ–≤–∞–Ω–∏—Ö —Å–ª—ñ–≤: {total_words}")
            return all_segments, total_words
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó: {e}")
            raise

    def translate_and_refine_segments(self, segments: List[Dict]) -> Tuple[List[Dict], int]:
        """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Å–µ–≥–º–µ–Ω—Ç–∏ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É."""
        translated_segments = []
        total_words_translated = 0
        translator = GoogleTranslator(source='auto', target=self.target_language)

        try:
            for segment in segments:
                self.log_message(f"–ü–µ—Ä–µ–∫–ª–∞–¥ —Å–µ–≥–º–µ–Ω—Ç–∞: '{segment['text'][:50]}...' –Ω–∞ {self.target_language}")
                translated_text = translator.translate(segment['text'])
                if not isinstance(translated_text, str):
                    self.log_message(
                        f"–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: translator.translate –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä—è–¥–æ–∫. –¢–∏–ø: {type(translated_text)}, –ó–Ω–∞—á–µ–Ω–Ω—è: {translated_text}")
                    translated_text = ""  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
                translated_segments.append({
                    'start': segment['start'],
                    'end': segment['end'],
                    'text': translated_text
                })
                total_words_translated += len(translated_text.split())
                self.log_message(f"–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç: '{translated_text[:50]}...'")
            return translated_segments, total_words_translated
        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
            raise

    def generate_tts_audio_for_segments(self, translated_segments: List[Dict]) -> Tuple[Optional[str], List[Dict]]:
        """–°—Ç–≤–æ—Ä—é—î –∞—É–¥—ñ–æ TTS –¥–ª—è –ø–∞–∫–µ—Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤."""
        tts_chunks = []
        updated_segments = []
        total_duration = 0
        try:
            for i, segment in enumerate(translated_segments):
                text = segment['text']
                self.log_message(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è TTS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}/{len(translated_segments)}: '{text[:50]}...'")
                timestamp = int(time.time())
                tts_dir = os.path.join(self.process_temp_dir, f"tts_segment_dir_{i}_{timestamp}")
                os.makedirs(tts_dir, exist_ok=True)
                tts_filename = f"tts_segment_{i}_{timestamp}.mp3"
                tts_filepath = os.path.join(tts_dir, tts_filename)

                try:
                    tts = gTTS(text=text, lang=self.target_language)
                    with open(tts_filepath, 'wb') as tts_file:
                        tts.write_to_fp(tts_file)

                    tts_chunks.append(tts_filepath)
                    duration_command = [
                        "ffprobe",
                        "-v", "error",
                        "-show_entries", "format=duration",
                        "-of", "default=noprint_wrappers=1:nokey=1",
                        tts_filepath
                    ]
                    duration_output, _ = self.run_subprocess_with_timeout(duration_command, 30,
                                                                        "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ TTS")
                    segment_duration = float(duration_output.strip())
                    updated_segments.append({
                        'start': total_duration,
                        'end': total_duration + segment_duration,
                        'text': text,
                    })
                    total_duration += segment_duration
                except Exception as e:
                    self.log_message(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è TTS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i + 1}: {e}")
                    # –û—á–∏—Å—Ç–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ –≤ —Ü—å–æ–º—É –ø–∞–∫–µ—Ç—ñ –¥–æ —Ü—å–æ–≥–æ —á–∞—Å—É
                    for file in tts_chunks:
                        self.remove_file_with_retry(file)
                        self.remove_directory_with_retry(os.path.dirname(file))  # –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥
                    return None, []  # –í–∫–∞–∑–∞—Ç–∏ –Ω–∞ –Ω–µ–≤–¥–∞—á—É

                self.log_message(f"TTS –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
                self.root.update()  # –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å GUI

            self.log_message(f"–ó–ª–∏—Ç—Ç—è {len(tts_chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ TTS...")
            if tts_chunks:
                merged_audio_path = os.path.join(self.process_temp_dir, f"merged_tts_audio_{int(time.time())}.mp3")
                self.merge_audio_chunks(tts_chunks, merged_audio_path)
                self.log_message(f"–ó–ª–∏—Ç–µ –∞—É–¥—ñ–æ TTS: {merged_audio_path}")

                for tts_file in tts_chunks:
                    self.remove_file_with_retry(tts_file)
                    self.remove_directory_with_retry(os.path.dirname(tts_file))

                return merged_audio_path, updated_segments
            else:
                self.log_message("–ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ TTS.")
                return None, []

        except Exception as e:
            self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–∑–ª–∏—Ç—Ç—è TTS: {e}")
            for file in tts_chunks:  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.remove_file_with_retry(file)
                self.remove_directory_with_retry(os.path.dirname(file))  # —ñ –∫–∞—Ç–∞–ª–æ–≥
            return None, []

    def open_webpage(self, url):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫—É —É –±—Ä–∞—É–∑–µ—Ä—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
        import webbrowser
        webbrowser.open(url)

if __name__ == "__main__":
    try:
        nltk.data.find('tokenizers/punkt')
    except LookupError:
        print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–∑–∞—Ç–æ—Ä–∞ NLTK punkt...")
        nltk.download('punkt')
    app = LinguoAIVideoVoicePro()
    app.root.mainloop()